import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import java.math.BigDecimal;
import java.util.Date;

class LPDRiskSignalTest {

    @InjectMocks
    private LPDRiskSignal lpdriskSignal;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        lpdriskSignal = new LPDRiskSignal();
    }

    @Test
    void testGettersAndSetters() {
        lpdriskSignal.setSignalIdentifier(1);
        lpdriskSignal.setSubjectId("S123");
        lpdriskSignal.setSubjectContext("Context");
        lpdriskSignal.setSubjectAdditionalContext("Additional Context");
        lpdriskSignal.setOriginalLifetimePD(BigDecimal.valueOf(0.05));
        lpdriskSignal.setResidualLifetimePD(BigDecimal.valueOf(0.03));
        lpdriskSignal.setClientSegmentLevel("High");
        lpdriskSignal.setDetrorationFlag("Y");
        lpdriskSignal.setAdministrationStatus("Active");
        lpdriskSignal.setPopulationTimestamp(new Date());
        lpdriskSignal.setLpdVersion(1);

        assertEquals(1, lpdriskSignal.getSignalIdentifier());
        assertEquals("S123", lpdriskSignal.getSubjectId());
        assertEquals("Context", lpdriskSignal.getSubjectContext());
        assertEquals("Additional Context", lpdriskSignal.getSubjectAdditionalContext());
        assertEquals(BigDecimal.valueOf(0.05), lpdriskSignal.getOriginalLifetimePD());
        assertEquals(BigDecimal.valueOf(0.03), lpdriskSignal.getResidualLifetimePD());
        assertEquals("High", lpdriskSignal.getClientSegmentLevel());
        assertEquals("Y", lpdriskSignal.getDetrorationFlag());
        assertEquals("Active", lpdriskSignal.getAdministrationStatus());
        assertNotNull(lpdriskSignal.getPopulationTimestamp());
        assertEquals(1, lpdriskSignal.getLpdVersion());
    }

    @Test
    void testEqualsAndHashCode() {
        LPDRiskSignal signal1 = new LPDRiskSignal();
        LPDRiskSignal signal2 = new LPDRiskSignal();

        signal1.setSignalIdentifier(1);
        signal2.setSignalIdentifier(1);

        assertEquals(signal1, signal2);
        assertEquals(signal1.hashCode(), signal2.hashCode());
    }

    @Test
    void testToString() {
        lpdriskSignal.setSignalIdentifier(1);
        lpdriskSignal.setSubjectId("S123");

        String expected = "LPDRiskSignal(signalIdentifier=1, subjectId=S123, ...)";
        assertTrue(lpdriskSignal.toString().contains("signalIdentifier=1"));
        assertTrue(lpdriskSignal.toString().contains("subjectId=S123"));
    }
}